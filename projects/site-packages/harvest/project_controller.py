import os, sys
import json
from uuid import uuid4
from datetime import datetime

from harvest.dynamodb_driver import DynamoDbDriver
from harvest.role_controller import RoleController

class ProjectController(DynamoDbDriver):

  def __init__(self, host, port):
    super().__init__(host, port, "Projects")
    super().set_partition_key("project_id")
    self.role = RoleController(host, port)

  def set_user_id(self, user_id):
    self.user_id = str(user_id)
    self.role.set_user_id(str(user_id))

  def set_project_id(self, project_id):
    self.project_id = str(project_id)
    self.role.set_project_id(str(project_id))
  
  def list_users(self):
    if not self.project_id:
      raise ValueError
    # TODO: 取得したロール一覧を基にユーザーの詳細情報を取得？
    return self.role.list_users()
    
  def list_projects(self):
    if not self.user_id:
      raise ValueError

    keys = [ {"project_id": item["project_id"]} for item in self.role.list_projects() ]
    
    return self.dynamodb.batch_get_item(
      RequestItems = {
        "Projects": {
          "Keys": keys,
          "ConsistentRead": False
        }
      }
    )["Responses"]["Projects"]

  def show(self):
    if not self.user_id or not self.project_id:
      raise ValueError
    # user_idを使って権限チェック
    return super().get_item(self.project_id)

  def create(self, name):
    if not self.user_id or not name:
      raise ValueError

    # そのユーザにpj作成権限があるかどうかを確認
    new_id = str(uuid4())
    now = datetime.now().isoformat()
    ret = super().put_item(
      item = {
        "project_id": new_id,
        "name": str(name),
        "created_at": now,
        "updated_at": now
      }
    )

    # TODO: project作成が失敗した時の処理を考える＠というかトランザクション？
    self.role.set_project_id(new_id)
    return self.role.create("owner")


  def update_name(self, name):
    if not self.user_id or not self.project_id:
      raise ValueError

    # user_idを使って権限チェック
    now = datetime.now().isoformat()
    return super().update_item(
        partition_key = self.project_id,
        update_exp = "set #name = :name, #updated_at = :updated_at",
        exp_attr_names = {
            '#name': "name",
            "#updated_at": "updated_at"
        },
        exp_attr_values={
            ":name": name,
            ":updated_at": now

        },
        cond_exp = 'attribute_exists(project_id)'
    )

  def update_users(self, users):
    if not self.user_id or not self.project_id:
      raise ValueError

    if isinstance(users, list):
      users = "#".join(users)

    # user_idを使って権限チェック
    now = datetime.now().isoformat()
    return super().update_item(
        partition_key = self.project_id,
        update_exp = "set #users = :users, #updated_at = :updated_at",
        exp_attr_names = {
            '#users': "users",
            "#updated_at": "updated_at"
        },
        exp_attr_values={
            ':users': users,
            ":updated_at": now
        },
        cond_exp = 'attribute_exists(project_id)'
    )

  def delete(self):
    if not self.user_id or not self.project_id:
      raise ValueError
    # user_idを使って権限チェック
    ret = super().delete_item(self.project_id)

    # TODO: projectの削除が失敗した時の処理を考える＠というかトランザクション？
    self.role.set_project_id(self.project_id)
    return self.role.delete()
