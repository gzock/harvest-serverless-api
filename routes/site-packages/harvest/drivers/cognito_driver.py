import logging
import boto3

PAGINATION_LOOP_LIMIT=1000

class CognitoDriver():

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  def __init__(self, pool_id=None):
    self.cognito = boto3.client('cognito-idp')
    if pool_id:
      self.pool_id = pool_id

  def __list_users(self, attr, filter_attr="username", page_token=None):
    if page_token:
      return self.cognito.list_users(
        UserPoolId=self.pool_id,
        Filter='%s = "%s"' % (filter_attr, attr),
        PaginationToken=page_token
      )
    else:
      return self.cognito.list_users(
        UserPoolId=self.pool_id,
        Filter='%s = "%s"' % (filter_attr, attr)
      )
    
  def list_users(self, attr, filter_attr="username"):
    if not self.pool_id:
      raise ValueError

    ret = []
    page_token = None
    for i in range(PAGINATION_LOOP_LIMIT):
      users = self.__list_users(attr, filter_attr, page_token)
      print(users)
      if "PaginationToken" in users:
        break
      ret.extend(users["Users"])

    return ret

  def __list_users_in_group(self, group_name, next_token=None):
    if next_token:
      return self.cognito.list_users_in_group(
          UserPoolId=self.pool_id,
          GroupName=group_name,
          Limit=60,
          NextToken=next_token
      )
    else:
      return self.cognito.list_users_in_group(
          UserPoolId=self.pool_id,
          GroupName=group_name,
          Limit=60
      )

  def list_users_in_group(self, group_name):
    if not self.pool_id:
      raise ValueError

    ret = []
    next_token = None
    for i in range(PAGINATION_LOOP_LIMIT):
      users = self.__list_users_in_group(group_name, next_token)
      ret.extend(users["Users"])
      if "NextToken" not in users:
        break

    return ret
    
  def show_group(self, group_name):
    return self.cognito.get_group(
      UserPoolId=self.pool_id,
      GroupName=group_name
    )["Group"]

  def show_user(self, username):
    return self.cognito.list_users(
      UserPoolId=self.pool_id,
      Filter='username = "{}"'.format(username)
    )["Users"]

  def create_user(self, username, email, password, preferred_username=False, custom_attr=None, verify=False):
    user_attr = [{"Name": "email", "Value": email}]

    if verify:
      user_attr.append({"Name": "email_verified", "Value": "true"})

    if preferred_username and isinstance(preferred_username, str):
      user_attr.append({"Name": "preferred_username", "Value": preferred_username})

    if custom_attr and isinstance(custom_attr, dict):
      custom_attr = [ {"Name": k, "Value": v} for k, v in custom_attr.items() ]
      user_attr.extend(custom_attr)

    return self.cognito.admin_create_user(
      UserPoolId=self.pool_id,
      Username=username,
      UserAttributes=user_attr,
      TemporaryPassword=password,
      ForceAliasCreation=False,
      MessageAction="SUPPRESS",
      DesiredDeliveryMediums=["EMAIL"]
    )["User"]

  def add_user_to_group(self, username, group_name):
    return self.cognito.admin_add_user_to_group(
      UserPoolId=self.pool_id,
      Username=username,
      GroupName=group_name
    )

  def set_user_password(self, username, password, permanent=True):
    return self.cognito.admin_set_user_password(
      UserPoolId=self.pool_id,
      Username=username,
      Password=password,
      Permanent=permanent
    )

  def delete_user(self, username):
    return self.cognito.admin_delete_user(
      UserPoolId=self.pool_id,
      Username=username
    )

#https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html#CognitoIdentityProvider.Client.list_users
