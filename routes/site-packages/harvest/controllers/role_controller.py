import os, sys
import json
import logging
from uuid import uuid4
from datetime import datetime

from harvest.drivers.dynamodb_driver import DynamoDbDriver

class RoleController(DynamoDbDriver):

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  user_id = None
  project_id = None

  def __init__(self, host, port):
    super().__init__(host, port, "Roles")
    super().set_partition_key("project_id")
    super().set_sort_key("user_id")

  def set_user_id(self, user_id):
    self.user_id = str(user_id)
    if self.user_id and self.project_id:
      self.__role = self.show()
      return self.__role

  def set_project_id(self, project_id):
    self.project_id = str(project_id)
    if self.user_id and self.project_id:
      self.__role = self.show()
      return self.__role
  
  def list_users(self):
    if not self.project_id:
      raise ValueError
    return super().query(self.project_id)["Items"]

  def list_projects(self):
    if not self.user_id:
      raise ValueError
    super().set_partition_key("user_id")
    super().set_sort_key(None)
    ret = super().query(self.user_id, index = "UserRolesIndex")
    super().set_partition_key("project_id")
    super().set_sort_key("user_id")
    return ret["Items"]

  def show(self):
    if not self.project_id or not self.user_id:
      raise ValueError
    # user_idを使って権限チェック
    ret = super().get_item(self.project_id, self.user_id)
    self.logger.info(ret)
    if "Item" in ret: 
      return ret["Item"]

  def create(self, role, user_id=None, project_id=None):
    if not role:
      raise ValueError

    if not user_id:
      user_id = self.user_id

    if not project_id:
      project_id = self.project_id

    # TODO: そのユーザにpj作成権限があるかどうかを確認
    # TODO: usernameやemailも入れるべき？？
    return super().put_item(
      item = {
        "project_id": project_id,
        "user_id": user_id,
        "role": role
      }
    )

  def update(self, role):
    if not self.project_id or not self.user_id:
      raise ValueError

    # user_idを使って権限チェック
    return super().update_item(
        partition_key = self.project_id,
        sort_key = self.user_id,
        update_exp = "set #role = :role",
        exp_attr_names = {
            '#role': "role"
        },
        exp_attr_values={
            ":role": role,

        },
        cond_exp = 'attribute_exists(user_id)'
    )

  def delete(self, user_id=None):
    if not self.project_id or not self.user_id:
      raise ValueError

    if user_id:
      user_id = self.user_id

    return super().delete_item(
      partition_key = self.project_id,
      sort_key = user_id
    )

  def delete_all(self):
    users = self.list_users()
    user_ids = [ {"project_id": self.project_id, "user_id": user["user_id"]} for user in users ]
    return super().batch_del_item(user_ids)

