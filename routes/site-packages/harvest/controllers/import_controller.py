import os, sys
from datetime import datetime

from harvest.drivers.dynamodb_driver import DynamoDbDriver
from harvest.utils.csv_optimizer import CsvOptimizer
from harvest.controller.place_controller import PlaceController
from harvest.controller.target_controller import TargetController
from harvest.exception import ActionDeniedError

# カスタム例外も足して投げられるようにする
#TODO: api gateway側にも実装
# guiなしでの動作確認
# webui側の実装

class ImportController():
  places = None
  targets = None
  project_id = None

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  def __init__(self, host, port, filename=None):
    self.place_controller = PlaceController(host, port)
    self.target_controller = TargetController(host, port)

    if filename:
      self.import_csv(filename)

  def set_project_id(self, project_id):
    self.project_id = project_id

  # csvを読み込む
  def open_csv(self, filename):
    csv = CsvOptimizer(filename)
    self.places, self.targets = batch.optimize()
    
  # csv => dictを読み出す
  def convert(self, rewrite=True):
    if not self.project_id or not self.places or not self.targets:
      raise ValueError

    converted_places = []
    for place in self.places:
      converted_places.append(
         make_place_obj(self.project_id, place["place_id"], place["parent_place_id"], place["hierarchy"], place["name"])
      )

    converted_targets = []
    for target in self.targets:
      converted_places.append(
          make_target_obj(self.project_id, target["target_id"], target["parent_place_id"], target["name"])
      )

    if rewrite:
      self.places = converted_places
      self.targets = converted_targets
    return converted_places, converted_targets

  def batch_create(self, places=None, targets=None):
    self.place_controller.batch_create_places()
    self.target_controller.batch_create_targets()
    

  def make_place_obj(self, new_id, parent_place_id, hierarchy, name):
    now = datetime.now().isoformat()
    return {
        "project_id": project_id,
        "place_id": new_id,
        "parent_place_id": parent_place_id,
        "hierarchy": hierarchy,
        "name": str(name),
        "photos": {
          "required": 0,
          "results": {
            "before": 0,
            "after": 0,
          }
        },
        "created_at": now,
        "updated_at": now
    }
  
  def make_target_obj(self, new_id, parent_place_id, name):
    now = datetime.now().isoformat()
    return {
        'project_id': project_id,
        'target_id': new_id,
        'parent_place_id': parent_place_id,
        'name': name,
        'photos': {
          'adopt': {
            'before': "",
            'after': ""
          },
          "before": [],
          "after": []
        },
        'created_at': now,
        'updated_at': now
    }
  
