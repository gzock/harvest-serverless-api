import os, sys
import json
import logging
import re
from uuid import uuid4, UUID
from datetime import datetime

from harvest.drivers.cognito_driver import CognitoDriver
from harvest.controllers.role_controller import RoleController
from harvest.commons.billing.billing import Billing

COGNITO_USER_POOL_ID="ap-northeast-1_KrEPljcrG"

class CorporationController():

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  def __init__(self, host, port):
    self.cognito = CognitoDriver(COGNITO_USER_POOL_ID)
    self.billing = Billing(host, port)

  def set_corporation_id(self, corporation_id):
    self.corporation_id = str(corporation_id)

  def show(self, corporation_id=None):
    if not corporation_id:
      corporation_id = self.corporation_id

    users = self.list_users()
    self.billing.set_users(users)
    billing = self.billing.show(corporation_id)
    return {  
        "users": users,
        "billing": billing
    }

  # その企業IDに結びついたユーザー一覧を取得
  def list_users(self):
    users = self.cognito.list_users_in_group(group_name=self.corporation_id)
    self.logger.info("list corporation users: " + str(users))

    ret = []
    for user in users:
      tmp = { attr["Name"]: attr["Value"] for attr in user["Attributes"] }
      tmp.update({
          "user_type": tmp["custom:user_type"],
          "kana_username": tmp["custom:kana_username"],
          "created_at": tmp["custom:created_at"]
      })
      del tmp["custom:user_type"],
      del tmp["custom:kana_username"],
      del tmp["custom:created_at"]
      del tmp["custom:pricing_plan"]
      del tmp["email_verified"]
      del tmp["sub"]
      ret.append(tmp)
    self.logger.info("proccesing corporation cognito user data: " + str(ret))

    if not ret:
      # TODO: カスタム例外なげる
      raise ValueError
    return ret

  def create_user(self, corporation_id, username, kana_username, email, password):
    self.logger.error("create user and add group processing start.")
    self.logger.error("corporation_id: %s, username: %s, kana_username: %s, email: %s" % (corporation_id, username, kana_username, email))
    custom_attr = {
      "custom:kana_username": kana_username,
      "custom:pricing_plan": "standard",
      "custom:user_type": "employee", 
      "custom:created_at": datetime.now().isoformat()
    }
    self.logger.error("custom attributes: " + str(custom_attr))
    user = self.cognito.create_user(
        username=email, 
        email=email, 
        password=password, 
        preferred_username=username, 
        custom_attr=custom_attr,
        verify=True
    )

    self.logger.info("created user: " + str(user))
    if user["Enabled"]:
      self.logger.info("user creation successfully.")
      if user["UserStatus"] == "FORCE_CHANGE_PASSWORD":
        self.logger.info("created user was settemporary passowrd. setting for permanent password.")
        self.cognito.set_user_password(user["Username"], password)
      self.logger.info("add user to group: " + corporation_id)
      self.cognito.add_user_to_group(user["Username"], corporation_id)
    else:
      self.logger.error("created user is disabled or uncofirmed status... don't processing for add group func.")
      # TODO: ユーザーを消す必要がある

    del user["UserCreateDate"]
    del user["UserLastModifiedDate"]
    return user

  # TODO: 未実装
  #def delete_user(self, user_id):
  #  # 企業IDに結びついたIDの削除
  #  # 7月時点では未実装？

  #  if not self.corporation_id:
  #    raise ValueError
  #  # TODO: そのユーザーがownerになっているプロジェクトが存在するかどうかのチェック
  #  #       もし存在するのであれば・・・どうする？エラーを投げてwebapp側でオーナー移譲してくれよーと促す？
  #  return self.role.delete(user_id)

  #def update_user(self, user_id, info):
  #  # 企業IDに結びついたユーザーの情報変更
  #  # cognito api叩いて、カスタム属性などを編集？

  #  if not self.corporation_id:
  #    raise ValueError
  #  # TODO: cognito_driver側にカスタム属性を更新するメソッドを作って、それを使う感じ
  #  #       infoでdectでもらって、それのバリデートをして、カスタム属性を更新かける
  #  return self.role.update(role, user_id)

  #def search_users(self):
  #  # 企業IDのmail-domainを使って、企業IDに結びついていないユーザーを検索する
  #  # 企業IDのmail-addr取得 => domain分離 => それを使ってcognito.list_users => 既に割り当てられているユーザーを除外 => return
  #  
  #def join_user(self, user_id):
  #  # 特定のuser_idを企業IDに結びつける
  #  # ユーザーの検索を経た上で、このメソッドを叩いて、その企業IDにぶら下げる感じ

  #  if not self.corporation_id:
  #    raise ValueError
  #  return

  #def update(self):
  #  # 企業IDの情報変更
  #  # 必要か？何を編集させる？
