import os, sys
import json
import logging
import re
from uuid import uuid4, UUID
from datetime import datetime

from harvest.drivers.cognito_driver import CognitoDriver
from harvest.controllers.role_controller import RoleController
from harvest.commons.billing.billing import Billing

COGNITO_USER_POOL_ID="ap-northeast-1_KrEPljcrG"

class CorporationController():

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  def __init__(self):
    self.cognito = CognitoDriver(COGNITO_USER_POOL_ID)
    self.billing = Billing()

  def set_corporation_id(self, corporation_id):
    self.corporation_id = str(corporation_id)

  def show(self):
    users = self.list_users()
    price = self.billing.get_price(len(users))
    cycle = self.billing.get_cycle()
    # cognitoに登録されている企業情報とユーザー一覧、請求情報を返す？
    #{
    #  "info": {
    #    "corporation_id": "corporation user_id",
    #    "name": "corporation_name",
    #    "address": "street address",
    #    "tel_number": "telephone number",
    #    "pic_user_id": "tantousha"
    #  },
    return {  
        "users": users,
        "billing": {
          "price": price,
          "cycle": cycle
        }
    }

  # その企業IDに結びついたユーザー一覧を取得
  def list_users(self):
    users = self.cognito.list_users_in_group(group_name=self.corporation_id)
    self.logger.info("list corporation users: " + str(users))

    ret = []
    for user in users:
      tmp = { attr["Name"]: attr["Value"] for attr in user["Attributes"] }
      tmp.update({"uesr_id": user["Username"]})
      ret.append(tmp)
    self.logger.info("proccesing corporation cognito user data: " + str(ret))

    if not ret:
      # TODO: カスタム例外なげる
      raise ValueError
    return ret

  # TODO: 未実装
  #def delete_user(self, user_id):
  #  # 企業IDに結びついたIDの削除
  #  # 7月時点では未実装？

  #  if not self.corporation_id:
  #    raise ValueError
  #  # TODO: そのユーザーがownerになっているプロジェクトが存在するかどうかのチェック
  #  #       もし存在するのであれば・・・どうする？エラーを投げてwebapp側でオーナー移譲してくれよーと促す？
  #  return self.role.delete(user_id)

  #def update_user(self, user_id, info):
  #  # 企業IDに結びついたユーザーの情報変更
  #  # cognito api叩いて、カスタム属性などを編集？

  #  if not self.corporation_id:
  #    raise ValueError
  #  # TODO: cognito_driver側にカスタム属性を更新するメソッドを作って、それを使う感じ
  #  #       infoでdectでもらって、それのバリデートをして、カスタム属性を更新かける
  #  return self.role.update(role, user_id)

  #def search_users(self):
  #  # 企業IDのmail-domainを使って、企業IDに結びついていないユーザーを検索する
  #  # 企業IDのmail-addr取得 => domain分離 => それを使ってcognito.list_users => 既に割り当てられているユーザーを除外 => return
  #  
  #def join_user(self, user_id):
  #  # 特定のuser_idを企業IDに結びつける
  #  # ユーザーの検索を経た上で、このメソッドを叩いて、その企業IDにぶら下げる感じ

  #  if not self.corporation_id:
  #    raise ValueError
  #  return

  #def update(self):
  #  # 企業IDの情報変更
  #  # 必要か？何を編集させる？
