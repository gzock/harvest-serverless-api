import os, sys
import json
import logging
import re
from uuid import uuid4, UUID
from datetime import datetime

from harvest.drivers.dynamodb_driver import DynamoDbDriver

class BillingController(DynamoDbDriver):

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  def __init__(self, host, port):
    super().__init__(host, port, "Bills")
    super().set_partition_key("user_id")
    super().set_sort_key("context")

  def set_user_id(self, user_id):
    self.user_id = str(user_id)

  def show(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    self.logger.info("user_id: %s, processing show billing start" % user_id)
    dest = self.show_destination(user_id)
    history = self.show_history(user_id)
    ret = {
      "destination": dest["destination"],
      "history": history["history"]
    }
    self.logger.info("billing data: %s" % str(ret))
    return ret

  def show_destination(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    #try:
    ret = super().get_item(user_id, "destination")
    #except ResourceNotFoundException as e:
      
    self.logger.info("bill to destination data: %s" % str(ret))
    return ret["Item"]

  def show_history(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    ret = super().get_item(user_id, "history")
    self.logger.info("billing history data: %s" % str(ret))
    return ret["Item"]

