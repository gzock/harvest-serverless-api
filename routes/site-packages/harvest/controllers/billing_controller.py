import os, sys
import json
import logging
import re
from uuid import uuid4, UUID
from datetime import datetime
from math import floor
from decimal import Decimal

from harvest.drivers.dynamodb_driver import DynamoDbDriver

class BillingController(DynamoDbDriver):

  logger = logging.getLogger(__name__)
  logger.addHandler(logging.NullHandler())
  logger.setLevel(logging.DEBUG)

  def __init__(self, host, port):
    super().__init__(host, port, "Bills")
    super().set_partition_key("user_id")
    super().set_sort_key("context")

  def set_user_id(self, user_id):
    self.user_id = str(user_id)

  def show(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    self.logger.info("user_id: %s, processing show billing start" % user_id)
    dest = self.show_destination(user_id)
    history = self.list_history(user_id)
    ret = {
      "destination": dest["destination"],
      "history": history
    }
    self.logger.info("billing data: %s" % str(ret))
    return ret

  def show_destination(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    #try:
    ret = super().get_item(user_id, "destination")
    #except ResourceNotFoundException as e:
      
    self.logger.info("bill to destination data: %s" % str(ret))
    return ret["Item"]

  def list_history(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    ret = super().query(partition_key=user_id, sort_key="history", begins_with=True)["Items"]
    ret = [ item["history"] for item in ret ]
    self.logger.info("billing history data: %s" % str(ret))
    return ret


  def create(self, period, invoice_date, invoice_number, user_id=None, raw_price=0, tax=1.10, users_count=0):
    if not user_id:
      user_id = self.user_id
    
    now = datetime.now()
    item = {
      "context": "history_" + now.strftime('%Y%m'),
      "user_id": user_id,
      "history": {
        "billing_period": period,
        "invoice_date": invoice_date,
        "invoice_number": invoice_number,
        "price": Decimal(floor(raw_price * tax)),
        "raw_price": Decimal(raw_price),
        "status": "pending",
        "tax": Decimal(str(tax)),
        "users_count": users_count
      }
    }
    self.logger.info("generated bill for this month: %s" % str(item))
    return super().put_item(item)

  def update(self, history, price, users_count, user_id=None):
    if not user_id:
      user_id = self.user_id
    
    return super().update_item(
        partition_key = user_id,
        sort_key = history,
        update_exp = "set history.#price = :price, hisory.#raw_price = :raw_price, history.#users_count = :users_count",
        exp_attr_names = {
            '#pirce': "price",
            '#raw_price': "raw_price",
            '#users_count': "user_count"
        },
        exp_attr_values={
            ':pirce': price,
            ':raw_price': price - (price * (tax - 1.0)),
            ':users_count': users_count
        },
        cond_exp = 'attribute_exists(user_id)'
    )
