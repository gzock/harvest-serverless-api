import os, sys
import json
from uuid import uuid4
from datetime import datetime

from harvest.drivers.dynamodb_driver import DynamoDbDriver

class PlaceController(DynamoDbDriver):

  def __init__(self, host, port):
    super().__init__(host, port, "Places")
    super().set_partition_key("project_id")
    super().set_sort_key("place_id")
#    self.target = TargetController(host, port)

  def set_project_id(self, project_id):
    self.project_id = str(project_id)
#    self.target.set_project_id(str(project_id))
  
  def set_place_id(self, place_id):
    self.place_id = str(place_id)

  def list_children(self, parent_place_id):
    if not self.project_id or not parent_place_id:
      raise ValueError

    super().set_sort_key("parent_place_id")
    ret = super().query(
        partition_key = self.project_id, 
        sort_key = parent_place_id, 
        index = "ParentPlacesIndex"
    )
    super().set_sort_key("place_id")
    return ret["Items"]

  def show(self, place_id = None):
    if not self.project_id:
      raise ValueError
    if not place_id:
      place_id = self.place_id
    # user_idを使って権限チェック
    return super().get_item(self.project_id, place_id)["Item"]

  def create(self, name, parent_place_id = None):
    if not self.project_id or not name:
      raise ValueError

    if parent_place_id:
      # 親placeを取得
      parent = self.show(parent_place_id)
      hierarchy = parent["hierarchy"]
      # ヒエラルキに親place_idを足す
      hierarchy += "#{}".format(parent_place_id)
    else:
      parent_place_id = self.project_id
      hierarchy = self.project_id

    # そのユーザにpj作成権限があるかどうかを確認
    new_id = str(uuid4())
    now = datetime.now().isoformat()

    return super().put_item(
      item = {
        "project_id": self.project_id,
        "place_id": new_id,
        "parent_place_id": parent_place_id,
        "hierarchy": hierarchy,
        "name": str(name),
        "photos": {
          "required": 0,
          "results": {
            "before": 0,
            "after": 0,
          }
        },
        "created_at": now,
        "updated_at": now
      }
    )

  def update_name(self, name):
    if not self.project_id or not self.place_id:
      raise ValueError

    # user_idを使って権限チェック
    now = datetime.now().isoformat()
    return super().update_item(
        partition_key = self.project_id,
        sort_key = self.place_id,
        update_exp = "set #name = :name, #updated_at = :updated_at",
        exp_attr_names = {
            '#name': "name",
            "#updated_at": "updated_at"
        },
        exp_attr_values={
            ":name": name,
            ":updated_at": now

        },
        cond_exp = 'attribute_exists(project_id)'
    )

  def delete(self, place_id=None):
    if not self.project_id or not self.place_id:
      raise ValueError

    if not place_id:
      place_id = self.place_id

    return super().delete_item(self.project_id, self.place_id)
    ## TODO: 配下にplace or targetがいないことの確認、いたら消さない
    #places = self.list_children(place_id)
    #targets = self.target.list_children(place_id)

    #if places or targets:
    #  raise Exception

