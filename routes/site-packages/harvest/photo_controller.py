import os, sys
import json
from uuid import uuid4
from datetime import datetime

from harvest.dynamodb_driver import DynamoDbDriver
from harvest.place_controller import PlaceController
from harvest.role_controller import RoleController

class PhotoController(DynamoDbDriver):

  def __init__(self, host, port):
    super().__init__(host, port, "Targets")
    super().set_partition_key("project_id")
    super().set_sort_key("target_id")
    self.place = PlaceController(host, port)
    self.role = RoleController(host, port)

  def set_project_id(self, project_id):
    self.project_id = str(project_id)
    self.place.set_project_id(self.project_id)
    self.role.set_project_id(str(project_id))
  
  def set_target_id(self, target_id):
    self.target_id = str(target_id)

  #target単体配下の写真全てを取得
  def list(self, target_id):
    if not self.project_id or not target_id:
      raise ValueError

    target = super().get_item(self.project_id, target_id)["Item"]
    bfr_photos = target["photos"]["before"]
    aft_photos = target["photos"]["after"]

    # TODO: s3 get_object処理
    ret = {
      "before": [
        # base64 photo
      ],
      "after": [
        # base64 photo
      ]
    }
    ret.update(target["photos"]["adopt"])
    return ret

  #target単体配下の写真単体を取得
  def show(self, photo_id):
    if not self.project_id:
      raise ValueError
    if not photo_id:
      target_id = self.target_id
    # TODO: s3 get_object処理
    ret = ""
    return ret

  #target単体配下に写真を追加
  def create(self, target_id, type, src):
    if not self.project_id or not name:
      raise ValueError
    
    new_id = str(uuid4())
    # TODO: s3 put_objectで画像を保存

    #target_idを使ってtargetを取得
    target = super().get_item(self.project_id, target_id)["Item"]

    if target["parent_place_id"] == self.project_id:
      #parent_place_id = self.project_id
      hierarchy = None
    else:
      # 親placeを取得
      parent = self.place.show(target["parent_place_id"])
      hierarchy = parent["hierarchy"]
      # ヒエラルキに親place_idを足す
      hierarchy += "#{}".format(parent_place_id)
      hierarchy = hierarchy.split("#")
      if hierarchy[0] == self.project_id:
        del hierarchy[0]
        print("root_place found.") #logger?

    now = datetime.now().isoformat()
    if hierarchy:
      transact_items = []
      for place_id in hierarchy:
        transact_items.append(
            {
              'Update': {
                'TableName': "Places",
                'Key': {
                  'project_id': {'S': self.project_id},
                  'place_id': {'S': place_id}
                },
                'ConditionExpression': 'attribute_exists(project_id)',
                'UpdateExpression': 'set photos.#type = photos.#type + :p',
                'ExpressionAttributeValues': {":p": {"N":"1"}},
                'ExpressionAttributeNames':  {"#type": type}
              }
            }
        )
    transact_items.append(
        {
          'Update': {
            'TableName': "Targets",
            'Key': {
              'project_id': {'S': self.project_id},
              'target_id': {'S': target_id}
            },
            'ConditionExpression': 'attribute_exists(project_id)',
            'UpdateExpression': 'set photos.#type = list_append(photos.#type, :id)',
            'ExpressionAttributeValues': {":id": {"S":new_id}},
            'ExpressionAttributeNames':  {"#type": type}
          }
        }
    )

    return self.client.transact_write_items(
        ReturnConsumedCapacity = 'INDEXES',
        TransactItems = transact_items
    )

  #写真を採用
  def update_adopt(self, target_id, photo_id):
    if not self.project_id or not self.target_id:
      raise ValueError

    # user_idを使って権限チェック
    now = datetime.now().isoformat()
    return super().update_item(
        partition_key = self.project_id,
        sort_key = self.photo_id,
        update_exp = "set photos.adopt.#type = :photo_id, #updated_at = :updated_at",
        exp_attr_names = {
            '#type': type,
            "#updated_at": "updated_at"
        },
        exp_attr_values={
            ":photo_id": photo_id,
            ":updated_at": now

        },
        cond_exp = 'attribute_exists(project_id)'
    )

  #target単体配下の写真単体を削除
  def delete(self, photo_id):
    if not self.project_id or not self.target_id:
      raise ValueError
    # user_idを使って権限チェック
    # TODO: 完全に未実装(targetを取得して1以下にならないことを確認して、updateのdeleteでリストから消す)
    return super().delete_item(self.project_id, self.target_id)
