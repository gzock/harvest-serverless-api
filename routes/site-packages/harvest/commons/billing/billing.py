from datetime import datetime
from calendar import monthrange
from math import floor

from harvest.controllers.billing_controller import BillingController

PRICE_PER_ACCOUNT = 500
TAX=1.10
CLOSING_DATE=25

class Billing():
  users = None

  def __init__(self, host, port, user_id=None):
    self.billing = BillingController(host, port)
    if user_id:
      self.billing.set_user_id(user_id)

  def set_users(self, users):
    self.users = users

  def show(self, user_id=None):
    if not user_id:
      user_id = self.user_id

    billing_data = self.billing.show(user_id)

    ret = {
      "price": self.calc_price(len(self.users)),
      "closed_on": self.get_closing_date(),
      "billed_on": self.get_cycle(),
      "status": self.get_status()
    }
    ret.update(billing_data)
    return ret

  def calc_price(self, account_cnt, month=None, raw=False):
    if raw:
      price = account_cnt * PRICE_PER_ACCOUNT
    else:
      price = floor(account_cnt * PRICE_PER_ACCOUNT * TAX)
    return price

  #TODO: 月指定での請求日を求められる機能があったほうが良いかも
  def get_cycle(self, needs_isoformat=True):
    now = datetime.now()
    last_day = monthrange(now.year, now.month)[1]
    if needs_isoformat:
      ret = now.replace(day=last_day, hour=0, minute=0, second=0, microsecond=0).isoformat()
    else:
      ret = now.replace(day=last_day, hour=0, minute=0, second=0, microsecond=0)
    return ret

  def get_closing_date(self, needs_isoformat=True):
    now = datetime.now()
    if needs_isoformat:
      ret = now.replace(day=CLOSING_DATE, hour=0, minute=0, second=0, microsecond=0).isoformat()
    else:
      ret = now.replace(day=CLOSING_DATE, hour=0, minute=0, second=0, microsecond=0)
    return ret

  def get_status(self):
    status = "pending"
    now = datetime.now()
    closing_date = self.get_closing_date(needs_isoformat=False)
    if now >= closing_date:
      status = "fixed"
    return status

  # 最初の請求レコードを作成
  def create(self, user_id=None):
    if not user_id:
      user_id = self.user_id
    if self.users:
      users_count = len(self.users)
    else:
      # TODO: 専用例外を投げるべき
      raise Exception

    invoice_number = len(self.billing.list_history(user_id)) + 1
    return self.billing.create(
        period=self.get_cycle(), 
        invoice_date=self.get_closing_date(), 
        invoice_number=invoice_number, 
        user_id=user_id, 
        raw_price=self.calc_price(users_count, raw=True), 
        tax=TAX, 
        users_count=users_count
    )

  # アカウント作成の際にusers_countやpriceを再計算して既存レコードを更新
  def update(self, history, user_id=None):
    if not user_id:
      user_id = self.user_id
    if "users" in locals():
      users_count = len(self.users)
    else:
      # TODO: 専用例外を投げるべき
      raise Exception

    return self.billing.update(
        user_id=user_id, 
        history=history,
        price=self.calc_price(users_count), 
        users_count=users_count
    )
