from harvest.commons.notifications.base_notification import BaseNotification

class ProjectUserNotification(BaseNotification):
  accept = "{project_name}: {user_name}さんが参加しました"
  request = "{project_name}: {user_name}さんが参加を希望しています"
  delete = "{project_name}: {user_name}さんが離脱しました"
  reject = "{project_name}: 参加を拒否されました"
  update_role = "{project_name}: ロールが{role}に変更されました"
  force_delete = "{project_name}: 強制的に離脱させられました"

  def __init__(self, stream_record, host, port):
    super().set_record_type("ユーザー管理")
    super().__init__(stream_record, host, port)

  def select_message(self):
    if self.is_insert_event:
      if self.record["status"] == "request":
        self.message = self.request
        self.notify_users = self.get_notify_users("admins")

    elif self.is_modify_event:
      if self.old_record["role"] != self.record["role"]:
        self.message = self.update_role
        self.notify_users = self.get_notify_users("specify", self.record["user_id"])

      elif (self.old_record["status"] == "reject" or self.old_record["status"] == "request") \
          and self.record["status"] == "active":
        self.message = self.accept
        self.notify_users = self.get_notify_users("all")
        self.notify_users.extend(self.get_notify_users("specify", self.record["user_id"]))

      elif self.record["status"] == "reject":
        self.message = self.reject
        self.notify_users = self.get_notify_users("specify", self.record["user_id"])

    elif self.is_remove_event:
      self.message = self.delete
      self.notify_users = self.get_notify_users("all")

    return self.message

  def generate(self):
    self.needs_strings_dict.update(
      {
        "role": self.record["role"]
      }
    )
    return super().generate()

