import os, sys
import json
from uuid import uuid4
from datetime import datetime

from harvest.dynamodb_driver import DynamoDbDriver
from harvest.place_controller import PlaceController
from harvest.role_controller import RoleController

class TargetController(DynamoDbDriver):

  def __init__(self, host, port):
    super().__init__(host, port, "Targets")
    super().set_partition_key("project_id")
    super().set_sort_key("target_id")
    self.place = PlaceController(host, port)
    self.role = RoleController(host, port)

  def set_project_id(self, project_id):
    self.project_id = str(project_id)
    self.place.set_project_id(self.project_id)
    self.role.set_project_id(str(project_id))
  
  def set_target_id(self, target_id):
    self.target_id = str(target_id)

  def list(self, project_id=None):
    if not project_id and self.project_id:
      project_id = self.project_id
    
    ret = super().query(
        partition_key = project_id
    )
    return ret["Items"]

  def list_children(self, parent_place_id):
    if not self.project_id or not parent_place_id:
      raise ValueError

    super().set_sort_key("parent_place_id")
    ret = super().query(
        partition_key = self.project_id, 
        sort_key = parent_place_id, 
        index = "ParentPlacesIndex"
    )
    super().set_sort_key("target_id")
    return ret["Items"]

  def show(self, target_id = None):
    if not self.project_id:
      raise ValueError
    if not target_id:
      target_id = self.target_id
    # user_idを使って権限チェック
    return super().get_item(self.project_id, target_id)["Item"]

  def create(self, name, parent_place_id = None):
    if not self.project_id or not name:
      raise ValueError
    
    if parent_place_id:
      # 親placeを取得
      parent = self.place.show(parent_place_id)
      hierarchy = parent["hierarchy"]
      # ヒエラルキに親place_idを足す
      hierarchy += "#{}".format(parent_place_id)
      hierarchy = hierarchy.split("#")
      if hierarchy[0] == self.project_id:
        del hierarchy[0]
        print("root_place found.") #logger?
    else:
      parent_place_id = self.project_id
      hierarchy = None

    #TODO: important ここもトランザクション処理させないと、ここが成功して次が失敗したときの影響が大きすぎる
    new_id = str(uuid4())
    now = datetime.now().isoformat()
    transact_items = []
    transact_items.append(
        {
          'Put': {
            'TableName': "Targets",
            'Item': {
              'project_id': {'S': self.project_id},
              'target_id': {'S': new_id},
              'parent_place_id': {'S': parent_place_id},
              'name': {'S': str(name)},
              'photos': {'M': {
                'adopt': {'M': {
                  'before': {'NULL': True},
                  'after': {'NULL': True}
                }},
                "before": {'L': []},
                "after": {'L': []}
              }},
              'created_at': {'S': now},
              'updated_at': {'S': now}
            }
          }
        }
    )

    if hierarchy:
      for place_id in hierarchy:
        transact_items.append(
            {
              'Update': {
                'TableName': "Places",
                'Key': {
                  'project_id': {'S': self.project_id},
                  'place_id': {'S': place_id}
                },
                'ConditionExpression': 'attribute_exists(project_id)',
                'UpdateExpression': 'set photos.required = photos.required + :p',
                'ExpressionAttributeValues': {":p": {"N":"1"}}
              }
            }
        )
      return self.client.transact_write_items(
          ReturnConsumedCapacity = 'INDEXES',
          TransactItems = transact_items
      )
    else:
      print("no trancation writes.") #logger?
      return ret

  # 写真撮影時の処理実装すべし
  #def xxxxx

  def update_name(self, name):
    if not self.project_id or not self.target_id:
      raise ValueError

    # user_idを使って権限チェック
    now = datetime.now().isoformat()
    return super().update_item(
        partition_key = self.project_id,
        sort_key = self.target_id,
        update_exp = "set #name = :name, #updated_at = :updated_at",
        exp_attr_names = {
            '#name': "name",
            "#updated_at": "updated_at"
        },
        exp_attr_values={
            ":name": name,
            ":updated_at": now

        },
        cond_exp = 'attribute_exists(project_id)'
    )

  def delete(self):
    if not self.project_id or not self.target_id:
      raise ValueError
    # user_idを使って権限チェック
    # TODO: transact_write_itemsで丸ごと削除
    return super().delete_item(self.project_id, self.target_id)
