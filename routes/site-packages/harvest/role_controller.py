import os, sys
import json
from uuid import uuid4
from datetime import datetime

from harvest.dynamodb_driver import DynamoDbDriver

class RoleController(DynamoDbDriver):

  def __init__(self, host=None, port=None):
    if host and port: 
      super().__init__(host, port, "Roles")
    super().set_partition_key("project_id")
    super().set_sort_key("user_id")

  def guard(self, func):
    print(func)
    #@functools.wraps(func)
    def _wrapper(*args, **kwargs):
      print(*args)
      print(**kwargs)
      result = func(*args, **kwargs)
      return result
    return _wrapper

  def set_user_id(self, user_id):
    self.user_id = str(user_id)

  def set_project_id(self, project_id):
    self.project_id = str(project_id)
  
  def list_users(self):
    if not self.project_id:
      raise ValueError
    return super().query(self.project_id)["Items"]

  def list_projects(self):
    if not self.user_id:
      raise ValueError
    super().set_partition_key("user_id")
    super().set_sort_key(None)
    ret = super().query(self.user_id, index = "UserRolesIndex")
    super().set_partition_key("project_id")
    super().set_sort_key("user_id")
    return ret["Items"]

  def show(self):
    if not self.project_id or not self.user_id:
      raise ValueError
    # user_idを使って権限チェック
    return super().get_item(self.project_id, self.user_id)["Item"]

  def create(self, role):
    if not self.project_id or not self.user_id or not role:
      raise ValueError

    # TODO: そのユーザにpj作成権限があるかどうかを確認
    # TODO: usernameやemailも入れるべき？？
    return super().put_item(
      item = {
        "project_id": self.project_id,
        "user_id": self.user_id,
        "role": role
      }
    )

  def update(self, role):
    if not self.project_id or not self.user_id:
      raise ValueError

    # user_idを使って権限チェック
    return super().update_item(
        partition_key = self.project_id,
        sort_key = self.user_id,
        update_exp = "set #role = :role",
        exp_attr_names = {
            '#role': "role"
        },
        exp_attr_values={
            ":role": role,

        },
        cond_exp = 'attribute_exists(user_id)'
    )

  def delete(self, all = False):
    if not self.project_id or not self.user_id:
      raise ValueError

    # user_idを使って権限チェック
    if all:
      return super().delete_item(
        partition_key = self.project_id
      )
    else:
      return super().delete_item(
        partition_key = self.project_id,
        sort_key = self.user_id
      )
