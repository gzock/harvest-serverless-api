import os, sys

from harvest.controllers.generate_controller import GenerateController
from harvest.auth import Auth
from harvest.exception import ActionDeniedError

class Generate():

  def __init__(self, host, port):
    self.gen = GenerateController(host, port)
    self.auth = Auth(host, port)

  def set_user_id(self, user_id):
    self.auth.set_user_id(user_id)

  def set_project_id(self, project_id):
    self.auth.set_project_id(project_id)

  def gen_zip(self, project_id, by_name=True, workspace="/tmp", result_filename="photos_result.zip", needs_download_url=True, needs_include_hierarchy=False, needs_make_dir=True, char_enc="utf_8"):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.gen.gen_zip(
        project_id,
        by_name=by_name,
        workspace=workspace,
        result_filename=result_filename,
        needs_download_url=needs_download_url,
        needs_include_hierarchy=needs_include_hierarchy, 
        needs_make_dir=needs_make_dir,
        char_enc=char_enc
    )

  def gen_excel_doc(self, project_id, needs_sort=True, needs_include_hierarchy=False, workspace="/tmp", template="basic_1.xlsx", result_filename="photos_result.xlsx", needs_download_url=True):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.gen.gen_excel_doc(
        project_id=project_id,
        needs_sort=needs_sort,
        needs_include_hierarchy=needs_include_hierarchy,
        template=template,
        result_filename=result_filename,
        needs_download_url=needs_download_url
    )
