import os, sys
from zipfile import ZipFile
from uuid import uuid4
from datetime import datetime

from harvest.drivers.s3_driver import S3Driver

from harvest.controllers.role_controller import RoleController
from harvest.controllers.photo_controller import PhotoController
from harvest.controllers.target_controller import TargetController

from harvest.utils.excel_doc_generator import ExcelDocGenerator

PHOTOS_BUCKET_NAME="product-harvest-photos"
GENERATED_BUCKET_NAME="product-harvest-generated"
REPOSITORY_BUCKET_NAME="product-harvest-repository"
EXCEL_TEMPLATES="templates/excel/"

class Generate():

  def __init__(self, host, port):
    self.photo = PhotoController(host, port)
    self.target = TargetController(host, port)
    self.role = RoleController(host, port)
    self.__s3_photos = S3Driver(PHOTOS_BUCKET_NAME)
    self.__s3_gen = S3Driver(GENERATED_BUCKET_NAME)
    self.__s3_repo = S3Driver(REPOSITORY_BUCKET_NAME)

  def __get_photo_list(self, project_id, by_name=True):
    targets = self.target.list(project_id)
    ret = []
    for target in targets:
      if by_name:
        name = target["name"]
        before_name = "施工前"
        after_name = "施工後"
      else:
        name = target["target_id"]
        before_name = "before"
        after_name = "after"

      if isinstance(target["photos"]["adopt"]["before"], str):
        ret.append({
            "name": name,
            "type": before_name,
            "photo": target["photos"]["adopt"]["before"],
        })
      if isinstance(target["photos"]["adopt"]["after"], str):
        ret.append({
            "name": name,
            "type": after_name,
            "photo": target["photos"]["adopt"]["after"],
        })
    return ret

  def gen_zip(self, project_id, by_name=True, workspace="/tmp", result_name="photos_result.zip", need_download_url=True):
    result_file_path = os.path.join(workspace, result_name)
    with ZipFile(result_file_path, 'w') as result_zip:
      for photo in self.__get_photo_list(project_id, by_name=by_name):
        print(photo)
        filename = os.path.join(workspace, photo["photo"])
        print(filename)
        try:
          self.__s3_photos.download_obj(photo["photo"], filename)
          result_zip.write(filename=filename, arcname="{}_{}.jpg".format(photo["name"], photo["type"]))
        except Exception as e:
          print(e)
          return e
    self.__s3_gen.upload_obj(result_file_path, result_name)

    ret = ""
    if need_download_url:
      ret = self.__s3_gen.create_presigned_url(result_name)
    else:
      ret = remote_name
    return ret

  def create_download_url(self, project_id, gen_type=None):
    url = ""
    if gen_type == "zip":
      print("exec start")
      uniq_name = str(uuid4()) + ".zip"
      obj_key = self.gen_zip(project_id, result_name=uniq_name)
      url = self.__s3_gen.create_presigned_url(obj_key)

    return url

  def gen_excel_doc(self, project_id, has_hierarchy=False, workspace="/tmp", template="basic_1.xlsx", result="photos_result.xlsx", need_download_url=True):
    local_workspace_path = os.path.join(workspace, str(uuid4()))
    local_template_path = os.path.join(local_workspace_path, template)
    local_result_path = os.path.join(local_workspace_path, result)

    # templateのcustom属性で判断
    remote_template_path = "templates/excel/defaults/{}".format(template)
    #if need_custom_template:
    #  #remote_template_path = "templates/excel/{}/{}".format(project_id, template)
    #  remote_template_path = "templates/excel/defaults/{}".format(template)
    #else:
    #  remote_template_path = "templates/excel/defaults/{}".format(template)
    remote_result_path = project_id + "/" + result

    if not os.path.exists(local_workspace_path):
      os.mkdir(local_workspace_path)

    photo_list = self.__get_photo_list(project_id)

    for photo in photo_list:
      print(photo)
      filename = os.path.join(workspace, photo["photo"])
      print(filename)
      try:
        self.__s3_photos.download_obj(photo["photo"], filename)

      except Exception as e:
        print(e)
        return e

    # s3から指定のテンプレxlsxを落としてくる
    print(remote_template_path)
    print(local_template_path)
    self.__s3_repo.download_obj(remote_template_path, local_template_path)

    excel = ExcelDocGenerator(local_template_path)
    excel.generate(photo_list, local_result_path)
    self.__s3_gen.upload_obj(local_result_path, remote_result_path)

    ret = ""
    if need_download_url:
      ret = self.__s3_gen.create_presigned_url(remote_result_path)
    else:
      ret = remote_result_path
    return ret

# order
# {
#    type: [zip | excel],
#    custom: boolean,
#    template: string,
#    with_place: boolean,
#  }
