import os, sys
from zipfile import ZipFile
from uuid import uuid4
from datetime import datetime

from harvest.role_controller import RoleController
from harvest.s3_driver import S3Driver
from harvest.photo_controller import PhotoController
from harvest.target_controller import TargetController

PHOTOS_BUCKET_NAME="product-harvest-photos"
GENERATED_BUCKET_NAME="product-harvest-generated"

class Generate():

  def __init__(self, host, port):
    self.photo = PhotoController(host, port)
    self.target = TargetController(host, port)
    self.role = RoleController(host, port)
    self.__s3_photos = S3Driver(PHOTOS_BUCKET_NAME)
    self.__s3_gen = S3Driver(GENERATED_BUCKET_NAME)

  def __get_photo_list(self, project_id):
    targets = self.target.list(project_id)
    ret = []
    for target in targets:
      ret.append({
          "name": target["name"],
          "before": target["photos"]["adopt"]["before"],
          "after": target["photos"]["adopt"]["after"],
      })
    return ret

  def zip(self, project_id, workspace="/tmp", result_name="photos_result.zip"):
    result_file_path = os.path.join(workspace, result_name)
    with ZipFile(result_file_path, 'w') as result_zip:
      for photo in self.__get_photo_list(project_id):
        print(photo)
        for photo_type in ["before", "after"]:
          print(photo_type)
          print(photo)
          if isinstance(photo[photo_type], str):
            filename = os.path.join(workspace, photo[photo_type])
            print(filename)
            try:
              print(photo[photo_type])
              self.__s3_photos.download_obj(photo[photo_type], filename)
              result_zip.write(filename=filename, arcname="{}_{}.jpg".format(photo["name"], photo_type))
            except Exception as e:
              print(e)
              return e
    self.__s3_gen.upload_obj(result_file_path, result_name)
    return result_name

  def create_download_link(self, project_id, gen_type=None):
    url = ""
    if gen_type == "zip":
      print("exec start")
      uniq_name = str(uuid4()) + ".zip"
      obj_key = self.zip(project_id, result_name=uniq_name)
      url = self.__s3_gen.create_presigned_url(obj_key)

    return url

