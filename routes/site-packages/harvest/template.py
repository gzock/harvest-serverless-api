import os, sys

from harvest.controllers.template_controller import TemplateController
from harvest.auth import Auth
from harvest.exception import ActionDeniedError

class Template():

  def __init__(self, host, port):
    self.tmpl = TemplateController()
    self.auth = Auth(host, port)

  def set_user_id(self, user_id):
    self.auth.set_user_id(user_id)
    self.user_id = user_id

  def set_project_id(self, project_id):
    self.auth.set_project_id(project_id)
    self.project_id = project_id

  def list(self, user_id=None, project_id=None):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()

    if not user_id:
      user_id = self.user_id
    if not project_id:
      project_id = self.project_id
    return self.tmpl.list(user_id, project_id)

  def get(self, template_id):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()

    url = self.tmpl.get(
        template_id=template_id,
        needs_download_url=True
    )
    return {"download_url": url }

  def create(
      self, 
      template_type, 
      template_data, 
      name, 
      description,
      property_hierarchy,
      property_date):

    if not self.auth.guard("admin"):
      raise ActionDeniedError()

    if template_type == "user":
      parent_id = self.user_id
    elif template_type == "project":
      parent_id = self.project_id
    else:
      raise ValueError

    return self.tmpl.create(
        template_type=template_type, 
        template_data=template_data, 
        parent_id=parent_id, 
        name=name,
        description=description,
        property_hierarchy=property_hierarchy,
        property_date=property_date,
        base64enc=True
    )

#  def gen_zip(self, 
#              project_id, 
#              by_name=True, 
#              workspace="/tmp", 
#              result_filename="photos_result.zip", 
#              needs_download_url=True, 
#              needs_include_hierarchy=False, 
#              needs_make_dir=True, 
#              needs_date=False,
#              char_enc="utf_8", 
#              needs_all_photos=False):
#
#    if not self.auth.guard("admin"):
#      raise ActionDeniedError()
#    return self.gen.gen_zip(
#        project_id,
#        by_name=by_name,
#        workspace=workspace,
#        result_filename=result_filename,
#        needs_download_url=needs_download_url,
#        needs_include_hierarchy=needs_include_hierarchy, 
#        needs_make_dir=needs_make_dir,
#        needs_date=needs_date,
#        char_enc=char_enc,
#        needs_all_photos=needs_all_photos
#    )
#
#  def gen_excel_doc(self, 
#                    project_id, 
#                    needs_sort=True, 
#                    needs_include_hierarchy=False, 
#                    needs_date=False,
#                    workspace="/tmp", 
#                    template="basic_1.xlsx", 
#                    result_filename="photos_result.xlsx", 
#                    needs_download_url=True):
#
#    if not self.auth.guard("admin"):
#      raise ActionDeniedError()
#    return self.gen.gen_excel_doc(
#        project_id=project_id,
#        needs_sort=needs_sort,
#        needs_include_hierarchy=needs_include_hierarchy,
#        needs_date=needs_date,
#        template=template,
#        result_filename=result_filename,
#        needs_download_url=needs_download_url
#    )
