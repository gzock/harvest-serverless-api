import os, sys
import json
from uuid import uuid4
from datetime import datetime
from decode_verify_jwt import decode_verify_jwt

from harvest.controllers.project_controller import ProjectController
from harvest.controllers.import_controller import ImportController
from harvest.auth import Auth
from harvest.exception import ActionDeniedError

class Project():
  project_id = None

  def __init__(self, host=None, port=None):
    self.project = ProjectController(host, port)
    self.importer = ImportController(host, port)
    self.auth = Auth(host, port)

  # common setters
  def set_user_id(self, user_id):
    self.project.set_user_id(user_id)
    self.auth.set_user_id(user_id)

  def set_project_id(self, project_id):
    self.project_id = project_id
    self.project.set_project_id(project_id)
    self.importer.set_project_id(project_id)
    self.auth.set_project_id(project_id)

  # actions for project
  def create_project(self, name, start_on, complete_on):
    return self.project.create(name, start_on, complete_on)

  def update_project(self, name):
    if not self.auth.guard("owner"):
      raise ActionDeniedError()
    return self.project.update_name(name)

  def delete_project(self):
    if not self.auth.guard("owner"):
      raise ActionDeniedError()
    return self.project.delete()

  def show_project(self):
    if not self.auth.guard():
      raise ActionDeniedError()
    return self.project.show()

  def list_projects(self):
    return self.project.list_projects()

  def list_users(self):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.project.list_users()

  def show_user(self, user_id):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.project.show_user(user_id)

  def join_user(self):
    return self.project.join_user()

  def accept_user(self, user_id):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.project.accept_user(user_id)

  def delete_user(self, user_id):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.project.delete_user(user_id)

  def reject_user(self, user_id):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.project.reject_user(user_id)

  def update_role(self, role, user_id):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()
    return self.project.update_role(role, user_id)

  def import_csv(self, csv_filename, base64enc=False):
    if not self.auth.guard("admin"):
      raise ActionDeniedError()

    places, targets = self.importer.open_csv(csv_filename, base64enc=base64enc)
    places, targets = self.importer.convert(places, targets)
    ret = self.importer.batch_create(places, targets)

    return ret

